rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isEventOwner(eventResource) {
      return request.auth.uid == eventResource.data.ownerId;
    }

    function isParticipant(eventId) {
      return exists(/databases/$(database)/documents/events/$(eventId)/participants/$(request.auth.uid));
    }

    function isInvited(eventId) {
      return exists(/databases/$(database)/documents/events/$(eventId)/invitations/$(request.auth.uid));
    }

    match /events/{eventId} {
      // Allow read access to public events, or if the user is the owner, a participant, or is invited to a private event.
      allow get: if request.auth != null &&
                   (resource.data.type == "public" ||
                    isEventOwner(resource) ||
                    isParticipant(eventId) ||
                    isInvited(eventId));

      // Allow listing of public events, or private events the user is a part of.
      allow list: if request.auth != null;

      // Allow authenticated users to create events, ensuring the ownerId is their own UID.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // Allow updates and deletes only by the event owner.
      allow update, delete: if request.auth != null && isEventOwner(resource);

      // Rules for the 'participants' subcollection
      match /participants/{userId} {
        // Allow reads if the user can view the parent event.
        allow get, list: if request.auth != null &&
                         (get(/databases/$(database)/documents/events/$(eventId)).data.type == "public" ||
                          isEventOwner(get(/databases/$(database)/documents/events/$(eventId))) ||
                          isParticipant(eventId) ||
                          isInvited(eventId));

        // Allow a user to add themselves as a participant.
        allow create: if request.auth != null && request.auth.uid == userId;

        // Allow a user to remove themselves as a participant.
        allow delete: if request.auth != null && request.auth.uid == userId;
      }

      // Rules for the 'invitations' subcollection
      match /invitations/{userId} {
          // Allow the event owner or the invited user to read the invitation.
          allow get: if request.auth != null &&
                      (isEventOwner(get(/databases/$(database)/documents/events/$(eventId))) ||
                       request.auth.uid == userId);

          // Only the event owner can create an invitation.
          allow create: if request.auth != null &&
                         isEventOwner(get(/databases/$(database)/documents/events/$(eventId)));
      }
    }
  }
}